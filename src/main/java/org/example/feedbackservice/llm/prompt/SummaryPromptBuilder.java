package org.example.feedbackservice.llm.prompt;

import org.example.feedbackservice.llm.model.dto.GeminiRequest;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class SummaryPromptBuilder implements PromptBuilder {
    @Override
    public GeminiRequest build(String content, String type) {
        String prompt = switch (type) {
            case "github" -> """
                     다음은 GitHub 프로젝트의 다양한 정보를 수집한 것입니다. 이 정보를 바탕으로 프로젝트의 전반적인 내용을 이해하고, 피드백을 위한 요약 작성.
                    
                     [요약 목적]
                     - 프로젝트의 구성과 흐름을 빠르게 파악하고, 기술적인 피드백이나 개선점을 제시할 수 있도록 전체 내용을 요약
                    
                     [요약 항목]
                     1. 프로젝트 요약: 전체적인 목표와 기능 개요
                     2. 기술 스택 및 구조 설명: 사용된 언어, 프레임워크, 폴더 구조 설명
                     3. 코드의 주요 흐름 및 설계: 중심이 되는 코드 로직과 설계 포인트
                     4. 최근 개발 동향: 커밋 메시지를 기반으로 현재 프로젝트 상태나 변경 내역
                     5. 예상 피드백 포인트: 보완이 필요해 보이는 부분이나 개선 제안 (간단히)
                    
                     [요청 형식]
                     각 항목을 번호로 구분하여 3-5줄 이내로 일목요연하게 정리. 한글평문으로 작성. 미사여구 제외
                    
                     GitHub 분석 정보: %s
                    """.formatted(content);
            case "file" -> """
                    다음은 개발자가 포트폴리오로 제출한 문서입니다. 이 문서에는 프로젝트의 진행 현황, API 명세서, 시스템 아키텍처, 다이어그램, 구현 계획, 기술 스택 선택 이유, 그리고 기타 산출물 등이 포함되어 있을 수 있습니다.
                    
                    [요약 항목]
                    1. 프로젝트 개요 및 목적
                       - 이 프로젝트는 어떤 문제를 해결하기 위한 것인가요?
                       - 주제와 핵심 목표는 무엇인가요?
                    2. 기술 구조 및 구성요소 설명
                       - 사용된 기술 스택은 무엇인가요?
                       - 주요 컴포넌트(API, 서비스, 모듈 등)의 역할과 구조는 어떻게 구성되어 있나요?
                    3. 구현 및 개발 진행도
                       - 개발 진행 상태는 어떤가요?
                       - 문서에 나타난 일정표, 그래프 등을 바탕으로 현재 진행 상황을 요약해주세요.
                    4. 설계 및 아키텍처 관련 특징
                       - 아키텍처 구성(계층, 패턴, 통신 등)은 어떤 식으로 설계되었나요?
                       - 문서에서 드러나는 설계적 강점이나 고민 흔적이 있다면 언급해주세요.
                    5. 기타 특이사항 또는 돋보이는 부분
                       - 팀 협업 요소, 테스트 전략, 배포 전략, UI/UX 고려사항 등 문서에 나타나는 기타 주목할 만한 점은 무엇인가요?
                    6. 요약 정리
                       - 위 항목들을 바탕으로 이 포트폴리오의 전반적인 인상 및 이해한 내용을 간략하게 요약해 주세요.
                    [요청 형식]
                    항목별로 번호를 붙여 간결하게 요약. 항목이 누락되어 있다면 "정보 없음"이라고 표시. 한글평문으로 작성. 미사여구 제외
                    
                    문서 내용: %s
                    """.formatted(content);
            case "combined" -> """
                    다음은 사용자의 포트폴리오 설명과 GitHub 프로젝트의 요약 내용, 포트폴리오 관련 첨부 파일의 요약 내용입니다. 이 정보를 기반으로 아래 항목을 기준으로 최종 요약을 작성해주세요.
                    
                    [요약 목적]
                    - 프로젝트의 전체 내용을 빠르게 이해하고, 효과적인 피드백을 제공할 수 있도록 내용을 정리합니다.
                    
                    [요약 항목]
                    1. 프로젝트 개요: 어떤 프로젝트인지 간결하게 설명
                    2. 주요 기능 및 특징: 사용자가 사용할 수 있는 핵심 기능
                    3. 사용된 기술 스택: 언어나 프레임워크, 주요 라이브러리 등
                    4. 개발 및 설계의 강점: 구조적 장점, 설계 철학, 개발 방식에서 드러나는 특징
                    5. 진행 상황 및 기여도: 전체 개발 진행 상황 및 개인 또는 팀 기여 정도
                    6. 기타 주목할 요소: 문서, 아키텍처, 다이어그램 등에서 드러나는 특이 사항
                    
                    [요청 형식]
                    항목별로 번호를 붙여 간결하게 요약. 항목이 누락되어 있다면 "정보 없음"이라고 표시. 한글 평문으로 작성. 미사여구 제외.
                    
                    내용: %s
                    """.formatted(content);
            case "readme" -> """
                    다음은 GitHub 프로젝트의 README.md 파일입니다. 이 파일을 기반으로 아래 항목을 기준으로 요약해주세요.
                    
                    [요약 목적]
                    - 프로젝트에 대해 빠르게 이해하고, 효과적인 피드백을 줄 수 있도록 내용을 정리하고 함.
                    
                    [요약 항목]
                    1. 프로젝트 개요: 어떤 프로젝트인지 간결하게 설명
                    2. 주요 기능 및 특징: 사용자가 사용할 수 있는 핵심 기능
                    3. 사용된 기술 스택: 언어나 프레임워크, 주요 라이브러리 등
                    4. 실행 방법 요약: 설치 또는 실행 지침이 있다면 요약
                    5. 기여 방법 및 기타 특이사항 (있다면)
                    
                    [요청 형식]
                    항목별로 번호를 붙여 간결하게 요약. 항목이 누락되어 있다면 "정보 없음"이라고 표시. 한글평문으로 작성. 미사여구 제외
                    
                    README: %s
                    """.formatted(content);
            default -> "";
        };
        return new GeminiRequest(
                List.of(new GeminiRequest.Content("user",
                        List.of(new GeminiRequest.Part(prompt)))));
    }
}
