server:
  port: 8080 # 충돌 문제 시 수정
spring:
  # JPA
  jpa:
    hibernate:
      # ddl-auto: create # 배포 시는 none 또는 validate 추천
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect # MySQL
        # dialect: org.hibernate.dialect.PostgreSQLDialect # PostgreSQL
        show_sql: true
        format_sql: true
  # 데이터소스
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver # MySQL
    # driver-class-name: org.postgresql.Driver # PostgreSQL
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
  # Security
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - profile_nickname # 추가했습니다.
          #              - account_email # 추가적 동의가 필요하다
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email # 추가했습니다.
              - profile # 추가했습니다.
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
# JWT
jwt:
  # openssl rand -base64 32
  secret: ${JWT_SECRET}
  encrypt-secret: ${JWT_ENCRYPT_SECRET}
  expiration-ms: 3600000 # 1시간
# 화면단 url
front-end:
  redirect: /profile/view
# LLM 설정 추가
llm:
  api:
    key: ${LLM_API_KEY}
    url: https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash
#수퍼베이스 설정 추가
supabase:
  url: ${SUPABASE_URL}
  bucket-name: ${SUPABASE_BUCKET_NAME}
  access-key: ${SUPABASE_ACCESS_KEY}

# GitHub token (Fine-grained token)
github:
  token: ${GITHUB_TOKEN}